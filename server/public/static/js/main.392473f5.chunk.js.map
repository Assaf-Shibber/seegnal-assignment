{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","term","count","precentage","arrOfData","setArrOfData","keyWord","setKeyWord","className","type","onChange","e","target","value","handleChange","onClick","fetch","method","body","JSON","stringify","headers","then","response","json","catch","error","console","map","item","index","key","data-column","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gQAsEeA,MAnEf,WAAgB,IAAD,EACqBC,mBAAS,CACzC,CAAEC,KAAM,UAAWC,MAAO,UAAWC,WAAY,aAFtC,mBACNC,EADM,KACKC,EADL,OAIiBL,qBAJjB,mBAINM,EAJM,KAIGC,EAJH,KA2Bb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,oBACb,mDACA,2BACEC,KAAK,OACLC,SAAU,SAACC,IA5BD,SAACA,GAElBJ,EAAWI,EAAEC,OAAOC,OA2BXC,CAAaH,MAGjB,4BAAQI,QAAS,WA3BrBC,MAAM,gCAAgC,CACpCC,OAAQ,OACVC,KAAMC,KAAKC,UAAU,CAACd,YACtBe,QAAS,CACP,eAAgB,sBAEfC,MAAK,SAACC,GAAD,OACNA,EACGC,OACAF,MAAK,SAACC,GACLlB,EAAakB,MAEdE,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAM,SAAUA,WAe1C,YAEF,yBAAKlB,UAAU,SACb,+BACE,+BACE,4BACE,kDACA,qCACA,4CAGJ,sCACGJ,QADH,IACGA,OADH,EACGA,EAAWwB,KAAI,SAACC,EAAMC,GACrB,OACE,wBAAIC,IAAKD,GACP,wBAAIE,cAAY,QACbH,EAAK5B,MAER,wBAAI+B,cAAY,SAASH,EAAK3B,OAC9B,wBAAI8B,cAAY,cAAcH,EAAK1B,qBC/CjC8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,c","file":"static/js/main.392473f5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [arrOfData, setArrOfData] = useState([\n    { term: \"no data\", count: \"no data\", precentage: \"no data\" },\n  ]);\n  const [keyWord, setKeyWord] = useState()\n const handleChange=(e)=>{\n\n   setKeyWord(e.target.value)\n }\n  const handleClick = () => {\n    fetch(`http://localhost:4000/newData`,{\n      method: \"POST\",\n    body: JSON.stringify({keyWord}),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n    }).then((response) =>\n      response\n        .json()\n        .then((response) => {\n          setArrOfData(response);\n        })\n        .catch((error) => console.error(\"Error:\", error))\n    );\n    \n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"search-container\">\n        <h3>Search for Reaction</h3>\n        <input\n          type=\"text\"\n          onChange={(e) => {\n            handleChange(e);\n          }}\n        />\n        <button onClick={()=>{handleClick()}}>Search!</button>\n      </div>\n      <div className=\"Table\">\n        <table>\n          <thead>\n            <tr>\n              <th>Name of Ingredient</th>\n              <th>Count</th>\n              <th>Precentage</th>\n            </tr>\n          </thead>\n          <tbody>\n            {arrOfData?.map((item, index) => {\n              return (\n                <tr key={index}>\n                  <td data-column=\"term\">\n                    {item.term}\n                  </td>\n                  <td data-column=\"Count\">{item.count}</td>\n                  <td data-column=\"Precentage\">{item.precentage}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}